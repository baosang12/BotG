#requires -Version 5.1
Set-StrictMode -Version Latest

function Remove-Bom {
    param([string]$s)
    if ($null -eq $s) { return $s }
    return $s.TrimStart([char]0xFEFF).Trim()
}

function Resolve-OrdersCsv {
    param([Parameter(Mandatory)][string]$segDir)
    $p1 = Join-Path -Path $segDir -ChildPath 'orders.csv'
    if (Test-Path -LiteralPath $p1) { return (Resolve-Path -LiteralPath $p1).Path }
    $tele = Join-Path -Path $segDir -ChildPath 'telemetry'
    $p2 = Join-Path -Path $tele -ChildPath 'orders.csv'
    if (Test-Path -LiteralPath $p2) { return (Resolve-Path -LiteralPath $p2).Path }
    $found = Get-ChildItem -LiteralPath $segDir -Recurse -File -Filter 'orders.csv' -ErrorAction SilentlyContinue |
             Select-Object -ExpandProperty FullName -First 1
    if ($found) { return $found }
    return $null
}

# NEW: ghi stub nếu không có orders
function Write-StubOrders {
    param([Parameter(Mandatory)][string]$OutPath)

    # Header "harness V3" – có đủ cột bắt buộc (status, reason, latency_ms, price_requested, price_filled, size_requested, size_filled)
    $header = @(
        'ts_iso','epoch_ms','phase','order_id',
        'side','action','type','status','reason','latency_ms',
        'price_requested','price_filled','size_requested','size_filled',
        'sl','tp','price_exec','theoretical_lots','theoretical_units',
        'requestedVolume','filledSize','slippage','brokerMsg',
        'client_order_id','host','session'
    ) -join ','

    Set-Content -LiteralPath $OutPath -Value $header -Encoding UTF8
    Write-Host "STUB_ORDERS_WRITTEN: $OutPath (0 rows)"
}

function Merge-Orders {
    param(
      [string[]]$ordersFiles,
      [Parameter(Mandatory)][string]$mergedOut
    )
    if (-not $ordersFiles -or $ordersFiles.Count -eq 0) {
        Write-Host "No orders.csv found. Writing stub..."
        Write-StubOrders -OutPath $mergedOut
        return
    }

    $first = $ordersFiles | Where-Object { (Get-Content -LiteralPath $_ -TotalCount 2 -Encoding UTF8).Count -ge 1 } | Select-Object -First 1
    if (-not $first) {
        Write-Host "All orders.csv are empty. Writing stub..."
        Write-StubOrders -OutPath $mergedOut
        return
    }

    $rawHeader = Get-Content -LiteralPath $first -TotalCount 1 -Encoding UTF8
    $header = Remove-Bom $rawHeader
    Set-Content -LiteralPath $mergedOut -Value $header -Encoding UTF8

    foreach ($src in $ordersFiles) {
        $lines = Get-Content -LiteralPath $src -Encoding UTF8
        if ($lines.Count -lt 2) { Write-Warning "Bỏ qua file rỗng/thiếu dữ liệu: $src"; continue }
        $srcHdr = Remove-Bom $lines[0]
        if ($srcHdr -ne $header) { Write-Warning "Header mismatch, SKIP: $src"; continue }
        $lines | Select-Object -Skip 1 | Add-Content -LiteralPath $mergedOut -Encoding UTF8
        Write-Host "Appended: $src"
    }
    Write-Host "MERGED_CSV: $mergedOut"
}

function Test-MinHeaders {
    param([Parameter(Mandatory)][string]$mergedOut)
    $hdr = (Get-Content -LiteralPath $mergedOut -TotalCount 1 -Encoding UTF8)
    $hdrCols = ($hdr -split ',') | ForEach-Object { (Remove-Bom $_) }
    $required = @('status','reason','latency_ms','price_requested','price_filled','size_requested','size_filled')
    $miss = $required | Where-Object { $_ -notin $hdrCols }
    if ($miss) { throw "Thiếu cột tối thiểu: $($miss -join ', ')" }
    $nice = @('take_profit','requested_units','level','risk_R_usd')
    $missNice = $nice | Where-Object { $_ -notin $hdrCols }
    if ($missNice) { Write-Warning "Thiếu cột tùy chọn: $($missNice -join ', ')" }
}

function Write-RunReport {
    param(
      [Parameter(Mandatory)][string]$runRoot,
      [Parameter(Mandatory)][string]$mergedOut,
      [Parameter(Mandatory)][string]$closedOut
    )
    $csv = @(Import-Csv -LiteralPath $mergedOut)
    if ($csv.Count -gt 0) {
        $phaseGroups = $csv | Group-Object phase
        $phaseStat = ($phaseGroups | ForEach-Object { "$($_.Name)=$($_.Count)" }) -join '; '
        $fills = $csv | Where-Object { $_.phase -eq 'FILL' }
    } else {
        $phaseStat = "no data"
        $fills = @()
    }

    if ($fills.Count -gt 0) {
        $m = $fills | Measure-Object -Property latency_ms -Average -Minimum -Maximum
        $latency = "latency_ms avg=$([int]$m.Average) min=$([int]$m.Minimum) max=$([int]$m.Maximum)"
    } else {
        $latency = "no FILL"
    }

    $fifoStatus = if (Test-Path -LiteralPath $closedOut) { "OK" } else { "N/A" }

    $mdLines = @(
        "# Smoke 60m Report",
        "**RUN_ROOT:** $runRoot",
        "**MERGED_CSV:** $(Split-Path $mergedOut -Leaf)",
        "**PHASES:** $phaseStat",
        "**FILL:** $($fills.Count) ($latency)",
        "**FIFO:** $fifoStatus"
    )
    $reportPath = Join-Path -Path $runRoot -ChildPath 'report_60m.md'
    Set-Content -LiteralPath $reportPath -Value ($mdLines -join "`r`n") -Encoding UTF8

    Write-Host "RUN_ROOT: $runRoot"
    Write-Host "FILL: $($fills.Count)"
    Write-Host "FIFO: $fifoStatus"
}