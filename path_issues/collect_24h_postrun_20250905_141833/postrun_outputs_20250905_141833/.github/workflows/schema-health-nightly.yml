name: Nightly Schema Health Check

on:
  schedule:
    # Chạy hàng đêm lúc 2:00 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:  # Allow manual trigger

jobs:
  schema-health-check:
    runs-on: ubuntu-latest
    name: Nightly Schema Validation
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pandas pytest
        
    - name: Comprehensive Schema Health Check
      run: |
        python -c "
        import pandas as pd
        import glob
        import json
        from datetime import datetime
        import sys
        sys.path.append('tools')
        from schema_guard import SchemaGuard

        print('=== NIGHTLY SCHEMA HEALTH CHECK ===')
        
        guard = SchemaGuard()
        csv_files = glob.glob('**/*.csv', recursive=True)
        results = []
        
        for csv_file in csv_files:
            if 'test' in csv_file.lower() or 'fixture' in csv_file.lower():
                continue
                
            try:
                df = pd.read_csv(csv_file, low_memory=False)
                
                # Quick validation
                schema_valid, schema_errors = guard.validate_schema(df)
                dup_results = guard.check_duplicates(df)
                
                result = {
                    'file': csv_file,
                    'rows': len(df),
                    'columns': len(df.columns),
                    'schema_valid': schema_valid,
                    'schema_errors': schema_errors,
                    'duplicate_percentage': dup_results['duplicate_percentage'],
                    'duplicate_status': dup_results['status']
                }
                results.append(result)
                
                print(f' {csv_file}: {len(df):,} rows, {dup_results[\"duplicate_percentage\"]}% dups')
                
            except Exception as e:
                print(f' Error processing {csv_file}: {e}')
                results.append({
                    'file': csv_file,
                    'error': str(e)
                })
        
        # Summary
        total_files = len(results)
        valid_files = len([r for r in results if r.get('schema_valid', False)])
        files_with_dups = len([r for r in results if r.get('duplicate_percentage', 0) > 0])
        
        print(f'\n SUMMARY:')
        print(f'  Files checked: {total_files}')
        print(f'  Schema valid: {valid_files}/{total_files}')
        print(f'  Files with duplicates: {files_with_dups}')
        
        # Save results
        health_report = {
            'timestamp': datetime.now().isoformat(),
            'total_files': total_files,
            'valid_files': valid_files,
            'files_with_duplicates': files_with_dups,
            'details': results
        }
        
        with open('schema_health_report.json', 'w') as f:
            json.dump(health_report, f, indent=2)
        
        print(f' Health report saved: schema_health_report.json')
        "
        
    - name: Upload Health Report
      uses: actions/upload-artifact@v3
      with:
        name: schema-health-report
        path: schema_health_report.json
        
    - name: Health Check Summary
      run: |
        echo "## Nightly Schema Health Check" >> 
        echo "- Comprehensive validation completed" >> 
        echo "- Health report generated and uploaded" >> 
        echo "- Check artifacts for detailed results" >> 
