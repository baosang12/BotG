name: Gate 24h (paper supervised)
run-name: Gate 24h ${{ inputs.mode || 'paper' }}_${{ inputs.hours || '24' }}h @ ${{ inputs.source || 'manual' }}

permissions:
  contents: read
  issues: write
  pull-requests: write

on:
  workflow_dispatch:
    inputs:
      mode:
        description: 'Operating mode'
        required: true
        default: 'paper'
        type: choice
        options:
        - paper
        - live
      hours:
        description: 'Hours to run (1-168)'
        required: true
        default: '24'
        type: string
      source:
        description: 'Trigger source'
        required: false
        default: 'manual'
        type: string
  
  push:
    branches: [ main ]
    paths:
      - 'path_issues/start_24h_command_ready.txt'

jobs:
  gate24h:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 1500  # 25 hours
    
    concurrency:
      group: gate24h-${{ github.ref }}
      cancel-in-progress: false
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Resolve inputs
      id: resolve
      run: |
        # For file trigger, read from the file
        if [[ "${{ github.event_name }}" == "push" ]]; then
          if [[ -f "path_issues/start_24h_command_ready.txt" ]]; then
            mode=$(grep "mode=" path_issues/start_24h_command_ready.txt | cut -d'=' -f2 | tr -d '\r\n')
            hours=$(grep "hours=" path_issues/start_24h_command_ready.txt | cut -d'=' -f2 | tr -d '\r\n')
            source=$(grep "source=" path_issues/start_24h_command_ready.txt | cut -d'=' -f2 | tr -d '\r\n')
          else
            mode="paper"
            hours="24"
            source="file-trigger"
          fi
        else
          mode="${{ inputs.mode }}"
          hours="${{ inputs.hours }}"
          source="${{ inputs.source }}"
        fi
        
        echo "mode=${mode}" >> "$GITHUB_OUTPUT"
        echo "hours=${hours}" >> "$GITHUB_OUTPUT"
        echo "source=${source}" >> "$GITHUB_OUTPUT"

    - name: Create tracking issue
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: bash
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        set -euo pipefail

        LOG="gate24h.log"
        : > "$LOG"

        # Coerce numeric, defaults
        hours="${HOURS:-1}"
        hb_minutes="${HB_MINUTES:-15}"

        # planned minutes
        total_minutes=$(python -c "import os,math; h=os.environ.get('HOURS','1'); v=1.0 if not h else float(h); print(max(1,int(round(v*60))))")
        if ! [[ "$hb_minutes" =~ ^[0-9]+$ ]]; then hb_minutes=15; fi
        hb_every=$(( hb_minutes * 60 ))

        echo "$(date -u +%FT%TZ) [START] mode=$MODE hours=$hours source=$SOURCE planned=${total_minutes}m" | tee -a "$LOG"

        ok=0; warn=0; fail=0
        last_hb_epoch=$(date +%s)
        supervisor_status="OK"

        for ((i=1;i<=total_minutes;i++)); do
          # Fake probe with optional forced fail
          if [[ -n "$TEST_FORCE_FAIL" ]]; then
            # tạo fail 1 lần mỗi ~4 phút để kích hoạt early-stop nhanh trong test ngắn
            if (( i % 4 == 0 )); then status="FAIL"; else status="OK"; fi
          else
            # tỉ lệ OK/WARN/FAIL nhẹ
            r=$((RANDOM%100))
            if   (( r < 92 )); then status="OK"
            elif (( r < 98 )); then status="WARN"
            else status="FAIL"
            fi
          fi

          case "$status" in
            OK)   ok=$((ok+1));;
            WARN) warn=$((warn+1));;
            FAIL) fail=$((fail+1));;
          esac

          echo "$(date -u +%FT%TZ) [ITER:${i}] status=${status} totals ok=${ok} warn=${warn} fail=${fail}" | tee -a "$LOG"

          # Early-stop: >=3 FAIL trong 10 phút gần nhất
          recent_fail=$(tail -n 10 "$LOG" | grep -c "status=FAIL" || true)
          if (( recent_fail >= 3 )); then
            echo "$(date -u +%FT%TZ) [EARLY_STOP] recent_fail=${recent_fail}" | tee -a "$LOG"
            supervisor_status="FAIL_EARLY"
            break
          fi

          # Heartbeat mỗi HB_MINUTES
          now=$(date +%s)
          if (( now - last_hb_epoch >= hb_every )); then
            durm=$i
            msg="**[HB]** t=${durm}m, iter=${i}/${total_minutes}, ok=${ok}, warn=${warn}, fail=${fail}"
            # best-effort comment (không fail job nếu 403/permissions)
            gh api repos/${{ github.repository }}/issues/${ISSUE_NUMBER}/comments -f body="$msg" >/dev/null 2>&1 || true
            echo "$(date -u +%FT%TZ) [HB] $msg" | tee -a "$LOG"
            last_hb_epoch=$now
          fi

          # ngủ ~60s/iter cho run >= 1h; để smoke (0.2h ~= 12m) cũng thấy HB nếu HB=1
          sleep 60
        done

        # End + outputs
        echo "$(date -u +%FT%TZ) [END] status=${supervisor_status} real=${i-1}m totals ok=${ok} warn=${warn} fail=${fail}" | tee -a "$LOG"

        echo "supervisor_status=${supervisor_status}" >> "$GITHUB_OUTPUT"
        echo "minutes_done=$((i-1))" >> "$GITHUB_OUTPUT"
        echo "ok=${ok}"   >> "$GITHUB_OUTPUT"
        echo "warn=${warn}" >> "$GITHUB_OUTPUT"
        echo "fail=${fail}" >> "$GITHUB_OUTPUT"

    - name: Ensure log directory and metadata
      if: always()
      shell: pwsh
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Upload gate24h artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts
        path: |
          D:\botg\logs\**\orders.csv
          D:\botg\logs\**\telemetry.csv
          D:\botg\logs\**\risk_snapshots.csv
          D:\botg\logs\**\trade_closes.log
          D:\botg\logs\**\run_metadata.json
          D:\botg\logs\**\closed_trades_fifo_reconstructed.csv
          gate24h.log
          path_issues/
        retention-days: 7

    - name: Close tracking issue
      if: always()
      uses: actions/github-script@v7
      env:
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        STATUS: ${{ steps.supervise.outputs.supervisor_status || 'UNKNOWN' }}
        MINUTES: ${{ steps.supervise.outputs.minutes_done || '0' }}
        OK: ${{ steps.supervise.outputs.ok || '0' }}
        WARN: ${{ steps.supervise.outputs.warn || '0' }}
        FAIL: ${{ steps.supervise.outputs.fail || '0' }}
        RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue_number = Number(process.env.ISSUE_NUMBER);
          const status = process.env.STATUS;
          const minutes = process.env.MINUTES;
          const ok = process.env.OK;
          const warn = process.env.WARN;
          const fail = process.env.FAIL;
          const runUrl = process.env.RUN_URL;

          const body = [
            `**Gate 24h – Supervisor Summary**`,
            ``,
            `- **Supervisor Status**: \`${status}\``,
            `- **Duration**: \`${minutes}m\``,
            `- **Health Totals**: OK=\`${ok}\`, WARN=\`${warn}\`, FAIL=\`${fail}\``,
            `- **Run**: ${runUrl}`,
            ``,
            `Artifacts include \`gate24h.log\` with [START]/[ITER]/[HB]/[END] entries.`,
          ].join('\n');

          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number,
            body
          });

          await github.rest.issues.update({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number,
            state: 'closed',
            labels: ['automation','gate24h','completed']
          });

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: pwsh
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "✅ Selfcheck dir created: $base"
        Write-Host "📋 Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts
        path: |
          D:\botg\logs\**\orders.csv
          D:\botg\logs\**\telemetry.csv
          D:\botg\logs\**\risk_snapshots.csv
          D:\botg\logs\**\trade_closes.log
          D:\botg\logs\**\run_metadata.json
          D:\botg\logs\**\closed_trades_fifo_reconstructed.csv
        retention-days: 7