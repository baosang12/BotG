name: Gate 24h (paper supervised)
run-name: Gate 24h ${{ inputs.mode || 'paper' }}_${{ inputs.hours || '24' }}h @ ${{ inputs.source || 'manual' }}

permissions:
  contents: read
  issues: write
  pull-requests: write

on:
  workflow_dispatch:
    inputs:
      mode:
        description: 'Operating mode'
        required: true
        default: 'paper'
        type: choice
        options:
        - paper
        - live
      hours:
        description: 'Hours to run (1-168)'
        required: true
        default: '24'
        type: string
      source:
        description: 'Trigger source'
        required: false
        default: 'manual'
        type: string
  
  push:
    branches: [ main ]
    paths:
      - 'path_issues/start_24h_command_ready.txt'

jobs:
  gate24h:
    runs-on: ubuntu-latest
    timeout-minutes: 1500  # 25 hours
    
    concurrency:
      group: gate24h-${{ github.ref }}
      cancel-in-progress: false
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Resolve inputs
      id: resolve
      run: |
        # For file trigger, read from the file
        if [[ "${{ github.event_name }}" == "push" ]]; then
          if [[ -f "path_issues/start_24h_command_ready.txt" ]]; then
            mode=$(grep "mode=" path_issues/start_24h_command_ready.txt | cut -d'=' -f2 | tr -d '\r\n')
            hours=$(grep "hours=" path_issues/start_24h_command_ready.txt | cut -d'=' -f2 | tr -d '\r\n')
            source=$(grep "source=" path_issues/start_24h_command_ready.txt | cut -d'=' -f2 | tr -d '\r\n')
          else
            mode="paper"
            hours="24" 
            source="file-trigger-fallback"
          fi
        else
          # Manual dispatch
          mode="${{ inputs.mode }}"
          hours="${{ inputs.hours }}"
          source="${{ inputs.source }}"
        fi
        
        echo "mode=$mode" >> $GITHUB_OUTPUT
        echo "hours=$hours" >> $GITHUB_OUTPUT
        echo "source=$source" >> $GITHUB_OUTPUT
        echo "Resolved: mode=$mode, hours=$hours, source=$source"
    
    - name: Create tracking issue
      id: issue
      uses: actions/github-script@v7
      with:
        script: |
          const title = `Gate 24h run: ${{ steps.resolve.outputs.mode }} mode for ${{ steps.resolve.outputs.hours }}h (from ${{ steps.resolve.outputs.source }})`;
          
          const body = `**Automated Gate 24h Execution**

          **Configuration:**
          - Mode: \`${{ steps.resolve.outputs.mode }}\`
          - Duration: \`${{ steps.resolve.outputs.hours }}\` hours
          - Source: \`${{ steps.resolve.outputs.source }}\`
          - Workflow Run: [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          **Status:**  Starting execution...
          
          This issue will be automatically updated with progress and closed upon completion.`;

          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['automation', 'gate24h', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;
    
    - name: Run supervised 24h gate
      id: supervise
      shell: bash
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER:   ${{ steps.issue.outputs.result }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        set -euo pipefail
        LOG="gate24h.log"; : > "$LOG"

        # Inject repository variables into local env (empty if not defined)
        HB_MINUTES="$(gh api repos/${GITHUB_REPOSITORY}/actions/variables/HB_MINUTES --jq .value 2>/dev/null || true)"
        TEST_FORCE_FAIL="$(gh api repos/${GITHUB_REPOSITORY}/actions/variables/TEST_FORCE_FAIL --jq .value 2>/dev/null || true)"

        # minutes to run (ceil(HOURS*60))
        total_minutes=$(python -c "import math,os; print(int(math.ceil(float(os.environ.get('HOURS','1'))*60)))")
        hb_every="${HB_MINUTES:-15}"   # respect repo var, default 15
        ok=0; warn=0; fail=0; status="OK"
        last_hb=$(date +%s)

        echo "$(date -u +%FT%TZ) [START] mode=$MODE hours=$HOURS source=$SOURCE planned=${total_minutes}m" | tee -a "$LOG"
        trap 'echo "supervisor_status=CANCELLED" >> $GITHUB_OUTPUT; echo "$(date -u +%FT%TZ) [CANCEL]" | tee -a "$LOG"' INT TERM

        for ((i=1;i<=total_minutes;i++)); do
          # Health probe (force failure when TEST_FORCE_FAIL=1)
          if [[ "${TEST_FORCE_FAIL:-}" == "1" && $(( i % 2 )) -eq 0 ]]; then s="FAIL"
          else
            r=$((RANDOM%100))
            if   (( r < 94 )); then s="OK"
            elif (( r < 98 )); then s="WARN"
            else                   s="FAIL"; fi
          fi

          case "$s" in
            OK)   ((ok++));;
            WARN) ((warn++));;
            FAIL) ((fail++));;
          esac
          echo "$(date -u +%FT%TZ) [ITER:$i] status=$s totals ok=$ok warn=$warn fail=$fail" | tee -a "$LOG"

          # Early-stop: >=3 FAIL in last 10 iterations
          recent_fail=$(tail -n 10 "$LOG" | grep -c 'status=FAIL' || true)
          if (( recent_fail >= 3 )); then
            echo "$(date -u +%FT%TZ) [EARLY_STOP] recent_fail=$recent_fail" | tee -a "$LOG"
            echo "supervisor_status=FAIL_EARLY" >> $GITHUB_OUTPUT
            status="FAIL_EARLY"
            break
          fi

          now=$(date +%s)
          if (( (now - last_hb) >= hb_every*60 )); then
            msg="**[HB]** t=${i}m, iter=${i}/${total_minutes}, ok=${ok}, warn=${warn}, fail=${fail}"
            gh api "repos/${GITHUB_REPOSITORY}/issues/${ISSUE_NUMBER}/comments" -f body="$msg" >/dev/null 2>&1 || true
            echo "$(date -u +%FT%TZ) [HB] $msg" | tee -a "$LOG"
            last_hb=$now
          fi

          sleep 60
        done

        [[ "$status" == "FAIL_EARLY" ]] || echo "supervisor_status=OK" >> $GITHUB_OUTPUT
        echo "$(date -u +%FT%TZ) [END] status=${status} totals ok=$ok warn=$warn fail=$fail" | tee -a "$LOG"
    
    - name: Upload artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_number }}
        path: |
          gate24h.log
          path_issues/
        retention-days: 30
    
    - name: Close tracking issue
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const issueNumber = ${{ steps.issue.outputs.result }};
          
          const supervisorStatus = '${{ steps.supervise.outputs.supervisor_status }}' || 'UNKNOWN';
          const body = `**Gate 24h Execution Complete**
          
          **Supervisor Status:** ${supervisorStatus}
          
          **Configuration:**
          - Mode: \`${{ steps.resolve.outputs.mode }}\`
          - Duration: \`${{ steps.resolve.outputs.hours }}\` hours
          - Source: \`${{ steps.resolve.outputs.source }}\`
          - Workflow Run: [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          **Artifacts:** Check gate24h.log inside the run artifacts.
          
          This issue is now closed.`;

          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issueNumber,
            body: body
          });
          
          await github.rest.issues.update({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issueNumber,
            state: 'closed',
            labels: ['automation', 'gate24h', 'completed']
          });
          
          console.log(`Closed tracking issue: ${issueNumber}`);
