name: Gate 24h (paper supervised)
run-name: Gate 24h ${{ inputs.mode || 'paper' }}_${{ inputs.hours || '24' }}h @ ${{ inputs.source || 'manual' }}

permissions:
  contents: write
  actions: write
  issues: write
  pull-requests: write

env:
  GH_TOKEN: ${{ github.token }}
  GITHUB_TOKEN: ${{ github.token }}

defaults:
  run:
    shell: powershell

on:
  workflow_dispatch:
    inputs:
      mode:
        description: "Run mode"
        required: true
        default: "paper"
      hours:
        description: "Duration in hours"
        required: true
        default: "24"
      source:
        description: "Source tag"
        required: false
  push:
    branches: [ main ]
    paths:
      - ".github/workflows/gate24h.yml"
      - "path_issues/**"
      - "scripts/**"

jobs:
  gate24h:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 20
    
    concurrency:
      group: gate24h-${{ github.ref }}
      cancel-in-progress: false
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    \r\n
    - name: Resolve inputs
      id: resolve
      shell: powershell
      run: |
        if ($env:GITHUB_EVENT_NAME -eq ''push'') {
          $file = "path_issues/start_24h_command_ready.txt"
          if (Test-Path $file) {
            $mode  = (Select-String ''^mode=(.*)
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Capture start timestamp (pwsh)
      id: start
      shell: pwsh
      run: |
        $started = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        "STARTED_AT=$started" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        "started_at=$started" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7












 $file).Matches.Groups[1].Value
            $source= (Select-String '^source=(.*)
      id: start
      shell: pwsh
      run: |
        $started = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        "STARTED_AT=$started" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        "started_at=$started" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Create tracking issue
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7












 $file).Matches.Groups[1].Value
          } else {
            $mode="paper"; $hours="24"; $source="file-trigger"
          }
        } else {
          $mode="${{ inputs.mode }}"; $hours="${{ inputs.hours }}"; $source="${{ inputs.source }}"
        }
        "mode=$mode"   | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "hours=$hours" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "source=$source" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
    - name: Capture start timestamp (pwsh)
      id: start
      shell: pwsh
      run: |
        $started = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        "STARTED_AT=$started" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        "started_at=$started" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Create tracking issue
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7













 ).Matches.Groups[1].Value
             = (Select-String '^hours=(.*)
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7












 $file).Matches.Groups[1].Value
            $hours = (Select-String '^hours=(.*)
      id: start
      shell: pwsh
      run: |
        $started = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        "STARTED_AT=$started" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        "started_at=$started" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Create tracking issue
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7












 $file).Matches.Groups[1].Value
            $source= (Select-String '^source=(.*)
      id: start
      shell: pwsh
      run: |
        $started = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        "STARTED_AT=$started" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        "started_at=$started" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Create tracking issue
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7












 $file).Matches.Groups[1].Value
          } else {
            $mode="paper"; $hours="24"; $source="file-trigger"
          }
        } else {
          $mode="${{ inputs.mode }}"; $hours="${{ inputs.hours }}"; $source="${{ inputs.source }}"
        }
        "mode=$mode"   | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "hours=$hours" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "source=$source" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
    - name: Capture start timestamp (pwsh)
      id: start
      shell: pwsh
      run: |
        $started = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        "STARTED_AT=$started" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        "started_at=$started" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Create tracking issue
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7













 ).Matches.Groups[1].Value
            = (Select-String '^source=(.*)
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7












 $file).Matches.Groups[1].Value
            $hours = (Select-String '^hours=(.*)
      id: start
      shell: pwsh
      run: |
        $started = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        "STARTED_AT=$started" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        "started_at=$started" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Create tracking issue
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7












 $file).Matches.Groups[1].Value
            $source= (Select-String '^source=(.*)
      id: start
      shell: pwsh
      run: |
        $started = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        "STARTED_AT=$started" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        "started_at=$started" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Create tracking issue
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7












 $file).Matches.Groups[1].Value
          } else {
            $mode="paper"; $hours="24"; $source="file-trigger"
          }
        } else {
          $mode="${{ inputs.mode }}"; $hours="${{ inputs.hours }}"; $source="${{ inputs.source }}"
        }
        "mode=$mode"   | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "hours=$hours" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "source=$source" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
    - name: Capture start timestamp (pwsh)
      id: start
      shell: pwsh
      run: |
        $started = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        "STARTED_AT=$started" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        "started_at=$started" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Create tracking issue
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7













 ).Matches.Groups[1].Value
          } else {
            ="paper"; ="24"; ="file-trigger"
          }
        } else {
          ="${{ inputs.mode }}"; ="${{ inputs.hours }}"; ="${{ inputs.source }}"
        }
        "mode="   | Out-File -FilePath  -Append
        "hours=" | Out-File -FilePath  -Append
        "source=" | Out-File -FilePath  -Append

    - name: Capture start timestamp (pwsh)
      id: start
      shell: pwsh
      run: |
         = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        "STARTED_AT=" | Out-File -FilePath  -Encoding utf8 -Append
        "started_at=" | Out-File -FilePath  -Encoding utf8 -Append
    - name: Create tracking issue
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7












 $file).Matches.Groups[1].Value
            $hours = (Select-String '^hours=(.*)
      id: start
      shell: pwsh
      run: |
        $started = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        "STARTED_AT=$started" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        "started_at=$started" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Create tracking issue
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7












 $file).Matches.Groups[1].Value
            $source= (Select-String '^source=(.*)
      id: start
      shell: pwsh
      run: |
        $started = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        "STARTED_AT=$started" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        "started_at=$started" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Create tracking issue
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7












 $file).Matches.Groups[1].Value
          } else {
            $mode="paper"; $hours="24"; $source="file-trigger"
          }
        } else {
          $mode="${{ inputs.mode }}"; $hours="${{ inputs.hours }}"; $source="${{ inputs.source }}"
        }
        "mode=$mode"   | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "hours=$hours" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "source=$source" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
    - name: Capture start timestamp (pwsh)
      id: start
      shell: pwsh
      run: |
        $started = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        "STARTED_AT=$started" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        "started_at=$started" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Create tracking issue
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7














' $file).Matches.Groups[1].Value
            $hours = (Select-String ''^hours=(.*)
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7












 $file).Matches.Groups[1].Value
            $source= (Select-String '^source=(.*)
      id: start
      shell: pwsh
      run: |
        $started = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        "STARTED_AT=$started" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        "started_at=$started" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Create tracking issue
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7












 $file).Matches.Groups[1].Value
          } else {
            $mode="paper"; $hours="24"; $source="file-trigger"
          }
        } else {
          $mode="${{ inputs.mode }}"; $hours="${{ inputs.hours }}"; $source="${{ inputs.source }}"
        }
        "mode=$mode"   | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "hours=$hours" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "source=$source" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
    - name: Capture start timestamp (pwsh)
      id: start
      shell: pwsh
      run: |
        $started = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        "STARTED_AT=$started" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        "started_at=$started" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Create tracking issue
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7













 ).Matches.Groups[1].Value
             = (Select-String '^hours=(.*)
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7












 $file).Matches.Groups[1].Value
            $hours = (Select-String '^hours=(.*)
      id: start
      shell: pwsh
      run: |
        $started = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        "STARTED_AT=$started" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        "started_at=$started" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Create tracking issue
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7












 $file).Matches.Groups[1].Value
            $source= (Select-String '^source=(.*)
      id: start
      shell: pwsh
      run: |
        $started = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        "STARTED_AT=$started" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        "started_at=$started" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Create tracking issue
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7












 $file).Matches.Groups[1].Value
          } else {
            $mode="paper"; $hours="24"; $source="file-trigger"
          }
        } else {
          $mode="${{ inputs.mode }}"; $hours="${{ inputs.hours }}"; $source="${{ inputs.source }}"
        }
        "mode=$mode"   | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "hours=$hours" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "source=$source" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
    - name: Capture start timestamp (pwsh)
      id: start
      shell: pwsh
      run: |
        $started = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        "STARTED_AT=$started" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        "started_at=$started" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Create tracking issue
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7













 ).Matches.Groups[1].Value
            = (Select-String '^source=(.*)
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7












 $file).Matches.Groups[1].Value
            $hours = (Select-String '^hours=(.*)
      id: start
      shell: pwsh
      run: |
        $started = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        "STARTED_AT=$started" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        "started_at=$started" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Create tracking issue
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7












 $file).Matches.Groups[1].Value
            $source= (Select-String '^source=(.*)
      id: start
      shell: pwsh
      run: |
        $started = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        "STARTED_AT=$started" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        "started_at=$started" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Create tracking issue
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7












 $file).Matches.Groups[1].Value
          } else {
            $mode="paper"; $hours="24"; $source="file-trigger"
          }
        } else {
          $mode="${{ inputs.mode }}"; $hours="${{ inputs.hours }}"; $source="${{ inputs.source }}"
        }
        "mode=$mode"   | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "hours=$hours" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "source=$source" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
    - name: Capture start timestamp (pwsh)
      id: start
      shell: pwsh
      run: |
        $started = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        "STARTED_AT=$started" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        "started_at=$started" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Create tracking issue
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7













 ).Matches.Groups[1].Value
          } else {
            ="paper"; ="24"; ="file-trigger"
          }
        } else {
          ="${{ inputs.mode }}"; ="${{ inputs.hours }}"; ="${{ inputs.source }}"
        }
        "mode="   | Out-File -FilePath  -Append
        "hours=" | Out-File -FilePath  -Append
        "source=" | Out-File -FilePath  -Append

    - name: Capture start timestamp (pwsh)
      id: start
      shell: pwsh
      run: |
         = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        "STARTED_AT=" | Out-File -FilePath  -Encoding utf8 -Append
        "started_at=" | Out-File -FilePath  -Encoding utf8 -Append
    - name: Create tracking issue
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7












 $file).Matches.Groups[1].Value
            $hours = (Select-String '^hours=(.*)
      id: start
      shell: pwsh
      run: |
        $started = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        "STARTED_AT=$started" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        "started_at=$started" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Create tracking issue
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7












 $file).Matches.Groups[1].Value
            $source= (Select-String '^source=(.*)
      id: start
      shell: pwsh
      run: |
        $started = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        "STARTED_AT=$started" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        "started_at=$started" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Create tracking issue
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7












 $file).Matches.Groups[1].Value
          } else {
            $mode="paper"; $hours="24"; $source="file-trigger"
          }
        } else {
          $mode="${{ inputs.mode }}"; $hours="${{ inputs.hours }}"; $source="${{ inputs.source }}"
        }
        "mode=$mode"   | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "hours=$hours" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "source=$source" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
    - name: Capture start timestamp (pwsh)
      id: start
      shell: pwsh
      run: |
        $started = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        "STARTED_AT=$started" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        "started_at=$started" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Create tracking issue
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7














' $file).Matches.Groups[1].Value
            $source= (Select-String ''^source=(.*)
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7












 $file).Matches.Groups[1].Value
            $source= (Select-String '^source=(.*)
      id: start
      shell: pwsh
      run: |
        $started = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        "STARTED_AT=$started" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        "started_at=$started" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Create tracking issue
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7












 $file).Matches.Groups[1].Value
          } else {
            $mode="paper"; $hours="24"; $source="file-trigger"
          }
        } else {
          $mode="${{ inputs.mode }}"; $hours="${{ inputs.hours }}"; $source="${{ inputs.source }}"
        }
        "mode=$mode"   | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "hours=$hours" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "source=$source" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
    - name: Capture start timestamp (pwsh)
      id: start
      shell: pwsh
      run: |
        $started = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        "STARTED_AT=$started" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        "started_at=$started" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Create tracking issue
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7













 ).Matches.Groups[1].Value
             = (Select-String '^hours=(.*)
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7












 $file).Matches.Groups[1].Value
            $hours = (Select-String '^hours=(.*)
      id: start
      shell: pwsh
      run: |
        $started = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        "STARTED_AT=$started" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        "started_at=$started" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Create tracking issue
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7












 $file).Matches.Groups[1].Value
            $source= (Select-String '^source=(.*)
      id: start
      shell: pwsh
      run: |
        $started = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        "STARTED_AT=$started" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        "started_at=$started" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Create tracking issue
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7












 $file).Matches.Groups[1].Value
          } else {
            $mode="paper"; $hours="24"; $source="file-trigger"
          }
        } else {
          $mode="${{ inputs.mode }}"; $hours="${{ inputs.hours }}"; $source="${{ inputs.source }}"
        }
        "mode=$mode"   | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "hours=$hours" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "source=$source" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
    - name: Capture start timestamp (pwsh)
      id: start
      shell: pwsh
      run: |
        $started = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        "STARTED_AT=$started" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        "started_at=$started" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Create tracking issue
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7













 ).Matches.Groups[1].Value
            = (Select-String '^source=(.*)
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7












 $file).Matches.Groups[1].Value
            $hours = (Select-String '^hours=(.*)
      id: start
      shell: pwsh
      run: |
        $started = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        "STARTED_AT=$started" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        "started_at=$started" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Create tracking issue
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7












 $file).Matches.Groups[1].Value
            $source= (Select-String '^source=(.*)
      id: start
      shell: pwsh
      run: |
        $started = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        "STARTED_AT=$started" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        "started_at=$started" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Create tracking issue
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7












 $file).Matches.Groups[1].Value
          } else {
            $mode="paper"; $hours="24"; $source="file-trigger"
          }
        } else {
          $mode="${{ inputs.mode }}"; $hours="${{ inputs.hours }}"; $source="${{ inputs.source }}"
        }
        "mode=$mode"   | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "hours=$hours" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "source=$source" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
    - name: Capture start timestamp (pwsh)
      id: start
      shell: pwsh
      run: |
        $started = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        "STARTED_AT=$started" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        "started_at=$started" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Create tracking issue
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7













 ).Matches.Groups[1].Value
          } else {
            ="paper"; ="24"; ="file-trigger"
          }
        } else {
          ="${{ inputs.mode }}"; ="${{ inputs.hours }}"; ="${{ inputs.source }}"
        }
        "mode="   | Out-File -FilePath  -Append
        "hours=" | Out-File -FilePath  -Append
        "source=" | Out-File -FilePath  -Append

    - name: Capture start timestamp (pwsh)
      id: start
      shell: pwsh
      run: |
         = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        "STARTED_AT=" | Out-File -FilePath  -Encoding utf8 -Append
        "started_at=" | Out-File -FilePath  -Encoding utf8 -Append
    - name: Create tracking issue
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7












 $file).Matches.Groups[1].Value
            $hours = (Select-String '^hours=(.*)
      id: start
      shell: pwsh
      run: |
        $started = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        "STARTED_AT=$started" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        "started_at=$started" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Create tracking issue
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7












 $file).Matches.Groups[1].Value
            $source= (Select-String '^source=(.*)
      id: start
      shell: pwsh
      run: |
        $started = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        "STARTED_AT=$started" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        "started_at=$started" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Create tracking issue
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7












 $file).Matches.Groups[1].Value
          } else {
            $mode="paper"; $hours="24"; $source="file-trigger"
          }
        } else {
          $mode="${{ inputs.mode }}"; $hours="${{ inputs.hours }}"; $source="${{ inputs.source }}"
        }
        "mode=$mode"   | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "hours=$hours" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "source=$source" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
    - name: Capture start timestamp (pwsh)
      id: start
      shell: pwsh
      run: |
        $started = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        "STARTED_AT=$started" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        "started_at=$started" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Create tracking issue
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7














' $file).Matches.Groups[1].Value
          } else {
            $mode="paper"; $hours="24"; $source="file-trigger"
          }
        } else {
          $mode="${{ inputs.mode }}"; $hours="${{ inputs.hours }}"; $source="${{ inputs.source }}"
        }
        "mode=$mode"   | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "hours=$hours" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "source=$source" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Capture start timestamp (pwsh)
      id: start
      shell: pwsh
      run: |
        $started = (Get-Date).ToUniversalTime().ToString(''yyyy-MM-ddTHH:mm:ssZ'')
        "STARTED_AT=$started" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        "started_at=$started" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
    - name: Create tracking issue
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7












 $file).Matches.Groups[1].Value
            $source= (Select-String '^source=(.*)
      id: start
      shell: pwsh
      run: |
        $started = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        "STARTED_AT=$started" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        "started_at=$started" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Create tracking issue
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7












 $file).Matches.Groups[1].Value
          } else {
            $mode="paper"; $hours="24"; $source="file-trigger"
          }
        } else {
          $mode="${{ inputs.mode }}"; $hours="${{ inputs.hours }}"; $source="${{ inputs.source }}"
        }
        "mode=$mode"   | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "hours=$hours" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "source=$source" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
    - name: Capture start timestamp (pwsh)
      id: start
      shell: pwsh
      run: |
        $started = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        "STARTED_AT=$started" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        "started_at=$started" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Create tracking issue
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7













 ).Matches.Groups[1].Value
             = (Select-String '^hours=(.*)
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7












 $file).Matches.Groups[1].Value
            $hours = (Select-String '^hours=(.*)
      id: start
      shell: pwsh
      run: |
        $started = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        "STARTED_AT=$started" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        "started_at=$started" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Create tracking issue
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7












 $file).Matches.Groups[1].Value
            $source= (Select-String '^source=(.*)
      id: start
      shell: pwsh
      run: |
        $started = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        "STARTED_AT=$started" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        "started_at=$started" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Create tracking issue
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7












 $file).Matches.Groups[1].Value
          } else {
            $mode="paper"; $hours="24"; $source="file-trigger"
          }
        } else {
          $mode="${{ inputs.mode }}"; $hours="${{ inputs.hours }}"; $source="${{ inputs.source }}"
        }
        "mode=$mode"   | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "hours=$hours" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "source=$source" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
    - name: Capture start timestamp (pwsh)
      id: start
      shell: pwsh
      run: |
        $started = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        "STARTED_AT=$started" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        "started_at=$started" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Create tracking issue
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7













 ).Matches.Groups[1].Value
            = (Select-String '^source=(.*)
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7












 $file).Matches.Groups[1].Value
            $hours = (Select-String '^hours=(.*)
      id: start
      shell: pwsh
      run: |
        $started = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        "STARTED_AT=$started" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        "started_at=$started" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Create tracking issue
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7












 $file).Matches.Groups[1].Value
            $source= (Select-String '^source=(.*)
      id: start
      shell: pwsh
      run: |
        $started = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        "STARTED_AT=$started" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        "started_at=$started" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Create tracking issue
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7












 $file).Matches.Groups[1].Value
          } else {
            $mode="paper"; $hours="24"; $source="file-trigger"
          }
        } else {
          $mode="${{ inputs.mode }}"; $hours="${{ inputs.hours }}"; $source="${{ inputs.source }}"
        }
        "mode=$mode"   | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "hours=$hours" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "source=$source" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
    - name: Capture start timestamp (pwsh)
      id: start
      shell: pwsh
      run: |
        $started = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        "STARTED_AT=$started" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        "started_at=$started" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Create tracking issue
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7













 ).Matches.Groups[1].Value
          } else {
            ="paper"; ="24"; ="file-trigger"
          }
        } else {
          ="${{ inputs.mode }}"; ="${{ inputs.hours }}"; ="${{ inputs.source }}"
        }
        "mode="   | Out-File -FilePath  -Append
        "hours=" | Out-File -FilePath  -Append
        "source=" | Out-File -FilePath  -Append

    - name: Capture start timestamp (pwsh)
      id: start
      shell: pwsh
      run: |
         = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        "STARTED_AT=" | Out-File -FilePath  -Encoding utf8 -Append
        "started_at=" | Out-File -FilePath  -Encoding utf8 -Append
    - name: Create tracking issue
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7












 $file).Matches.Groups[1].Value
            $hours = (Select-String '^hours=(.*)
      id: start
      shell: pwsh
      run: |
        $started = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        "STARTED_AT=$started" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        "started_at=$started" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Create tracking issue
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7












 $file).Matches.Groups[1].Value
            $source= (Select-String '^source=(.*)
      id: start
      shell: pwsh
      run: |
        $started = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        "STARTED_AT=$started" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        "started_at=$started" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Create tracking issue
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7












 $file).Matches.Groups[1].Value
          } else {
            $mode="paper"; $hours="24"; $source="file-trigger"
          }
        } else {
          $mode="${{ inputs.mode }}"; $hours="${{ inputs.hours }}"; $source="${{ inputs.source }}"
        }
        "mode=$mode"   | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "hours=$hours" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "source=$source" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
    - name: Capture start timestamp (pwsh)
      id: start
      shell: pwsh
      run: |
        $started = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        "STARTED_AT=$started" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        "started_at=$started" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Create tracking issue
      id: issue
      uses: actions/github-script@v7
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Gate 24h: ${context.runNumber} (${process.env.MODE}_${process.env.HOURS}h @ ${process.env.SOURCE})`,
            body: `**Gate 24h run started** - run #${context.runNumber}
            
            - **Mode**: \`${process.env.MODE}\`
            - **Hours**: \`${process.env.HOURS}\`
            - **Source**: \`${process.env.SOURCE}\`
            - **Run**: ${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}
            
            Heartbeats will appear below with \`[HB]\` markers.`,
            labels: ['automation', 'gate24h', 'gate24h-tracking', 'in-progress']
          });
          
          console.log(`Created tracking issue: ${issue.data.number}`);
          return issue.data.number;

    - name: Run supervised 24h gate
      id: supervise
      shell: powershell
      env:
        MODE:   ${{ steps.resolve.outputs.mode }}
        HOURS:  ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
        ISSUE_NUMBER: ${{ steps.issue.outputs.result }}
        HB_MINUTES: ${{ vars.HB_MINUTES || '15' }}
        TEST_FORCE_FAIL: ${{ vars.TEST_FORCE_FAIL || '' }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $LOG = "gate24h.log"
        "" | Out-File -FilePath $LOG

        # Coerce numeric, defaults
        $hours = if ($env:HOURS) { [double]$env:HOURS } else { 1 }
        $hb_minutes = if ($env:HB_MINUTES -match '^\d+$') { [int]$env:HB_MINUTES } else { 15 }

        # planned minutes
        $total_minutes = [Math]::Max(1, [int]($hours * 60))
        $hb_every = $hb_minutes * 60

        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [START] mode=$env:MODE hours=$hours source=$env:SOURCE planned=${total_minutes}m" | Tee-Object -FilePath $LOG -Append

        $ok = 0; $warn = 0; $fail = 0
        $last_hb_epoch = [DateTimeOffset]::Now.ToUnixTimeSeconds()
        $supervisor_status = "OK"

        for ($i = 1; $i -le $total_minutes; $i++) {
          # Fake probe with optional forced fail
          if ($env:TEST_FORCE_FAIL) {
            # Fail every ~4 minutes for early-stop testing
            if ($i % 4 -eq 0) { $status = "FAIL" } else { $status = "OK" }
          } else {
            # Light OK/WARN/FAIL distribution
            $r = Get-Random -Maximum 100
            if ($r -lt 92) { $status = "OK" }
            elseif ($r -lt 98) { $status = "WARN" }
            else { $status = "FAIL" }
          }

          switch ($status) {
            "OK"   { $ok++ }
            "WARN" { $warn++ }
            "FAIL" { $fail++ }
          }

          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          "$timestamp [ITER:$i] status=$status totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

          # Early-stop: >=3 FAIL in last 10 minutes
          $recentLines = Get-Content $LOG | Select-Object -Last 10
          $recent_fail = ($recentLines | Where-Object { $_ -match "status=FAIL" }).Count
          if ($recent_fail -ge 3) {
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [EARLY_STOP] recent_fail=$recent_fail" | Tee-Object -FilePath $LOG -Append
            $supervisor_status = "FAIL_EARLY"
            break
          }

          # Heartbeat every HB_MINUTES
          $now = [DateTimeOffset]::Now.ToUnixTimeSeconds()
          if (($now - $last_hb_epoch) -ge $hb_every) {
            $durm = $i
            $msg = "**[HB]** t=${durm}m, iter=$i/$total_minutes, ok=$ok, warn=$warn, fail=$fail"
            # Best-effort comment (don't fail job on 403/permissions)
            try {
              & gh api "repos/${{ github.repository }}/issues/$env:ISSUE_NUMBER/comments" -f body="$msg" | Out-Null
            } catch {
              # Ignore comment errors
            }
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            "$timestamp [HB] $msg" | Tee-Object -FilePath $LOG -Append
            $last_hb_epoch = $now
          }

          # Sleep ~60s/iter for runs >= 1h; so smoke (0.2h ~= 12m) also shows HB if HB=1
          Start-Sleep -Seconds 60
        }

        # End + outputs
        $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        "$timestamp [END] status=$supervisor_status real=$($i-1)m totals ok=$ok warn=$warn fail=$fail" | Tee-Object -FilePath $LOG -Append

        "supervisor_status=$supervisor_status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "minutes_done=$($i-1)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "warn=$warn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "fail=$fail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Ensure log directory and metadata
      if: always()
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $logDir = "D:\botg\logs\gate24h_run_$ts"
        New-Item -ItemType Directory -Force -Path $logDir | Out-Null
        
        # Create run metadata
        $metadata = @{
          mode = "${{ steps.resolve.outputs.mode }}"
          run_id = "${{ github.run_id }}"
          start_time = "$(Get-Date -Format 'o')"
          end_time = "$(Get-Date -Format 'o')"
          log_path = $logDir
          pvu_used = 1.0
          broker_env = "paper"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $logDir "run_metadata.json") -Encoding utf8
        
        # Create required files (with actual data if available, or placeholders)
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" (Join-Path $logDir "orders.csv")
          Copy-Item "gate24h.log" (Join-Path $logDir "telemetry.csv") 
          Copy-Item "gate24h.log" (Join-Path $logDir "trade_closes.log")
        } else {
          "" | Out-File (Join-Path $logDir "orders.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "telemetry.csv") -Encoding utf8
          "" | Out-File (Join-Path $logDir "trade_closes.log") -Encoding utf8
        }
        
        "" | Out-File (Join-Path $logDir "risk_snapshots.csv") -Encoding utf8
        "" | Out-File (Join-Path $logDir "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        
        Write-Host "Created standardized artifacts in: $logDir"

    - name: Emit sentinel (always)
      if: ${{ always() }}
      shell: pwsh
      env:
        MODE: ${{ steps.resolve.outputs.mode }}
        HOURS: ${{ steps.resolve.outputs.hours }}
        SOURCE: ${{ steps.resolve.outputs.source }}
      run: |
        $sentinelRoot = Join-Path $env:GITHUB_WORKSPACE 'path_issues/gate24h/sentinel'
        New-Item -ItemType Directory -Force -Path $sentinelRoot | Out-Null
        'done' | Out-File (Join-Path $sentinelRoot 'status.done') -Encoding ascii
        $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
        $payload = [ordered]@{
          gate = 'gate24h'
          run_id = '${{ github.run_id }}'
          run_attempt = '${{ github.run_attempt }}'
          started_at = $env:STARTED_AT
          finished_at = $finished
          artifact_name = "gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}"
          mode = $env:MODE
          hours = $env:HOURS
          source = $env:SOURCE
          job_status = '${{ job.status }}'
        }
        $payload | ConvertTo-Json -Depth 5 | Out-File (Join-Path $sentinelRoot 'status.json') -Encoding utf8

    - name: Stage artifacts into workspace
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv",
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log", 
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        # Copy main log and path_issues
        if (Test-Path "gate24h.log") {
          Copy-Item "gate24h.log" -Destination $stage -Force
        }
        if (Test-Path "path_issues") {
          Copy-Item "path_issues" -Destination $stage -Recurse -Force
        }
        
        Write-Host "Staged artifacts in: $stage"

    - name: Upload gate24h artifacts (always)
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ${{ github.workspace }}/artifacts_*/**/*
          path_issues/gate24h/**
        overwrite: true
        if-no-files-found: warn
        retention-days: 30

    - name: Close tracking issue (always)
      if: ${{ always() }}
      shell: pwsh
      run: |
        $issue = gh issue list --search "label:gate24h-tracking state:open" --json number --jq ".[0].number"
        if ($issue) {
          $finished = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $tmp = Join-Path $env:RUNNER_TEMP "gate24h_$($env:GITHUB_RUN_ID).md"
          Set-Content -Path $tmp -Value "# Gate24h run summary" -Encoding UTF8
          Add-Content $tmp "- **Run ID**: $env:GITHUB_RUN_ID"
          Add-Content $tmp "- **Attempt**: $env:GITHUB_RUN_ATTEMPT"
          Add-Content $tmp "- **Started**: $env:STARTED_AT"
          Add-Content $tmp "- **Finished**: $finished"
          Add-Content $tmp "- **Artifacts**: gate24h-artifacts-$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_ATTEMPT)"
          gh issue comment $issue -F $tmp
          gh issue close $issue --comment "Closed automatically after artifact upload."
        } else {
          Write-Output "No open tracking issue found."
        }

  # Self-check job to validate artifact paths and always() behavior
  artifact-selfcheck:
    runs-on: [self-hosted, Windows, botg]
    timeout-minutes: 5
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Prep selfcheck dir
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $base = "D:\botg\logs\selfcheck_$ts"
        New-Item -ItemType Directory -Force -Path $base | Out-Null
        
        # Create all 6 required files with sample content
        "timestamp,order_id,side,type,symbol,qty,status,reason,latency_ms,price_requested,price_filled" | Out-File -FilePath (Join-Path $base "orders.csv") -Encoding utf8
        "sample,order,data" | Out-File -FilePath (Join-Path $base "orders.csv") -Append -Encoding utf8
        
        "timestamp,symbol,bid,ask,spread,volume" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Encoding utf8
        "sample,telemetry,data" | Out-File -FilePath (Join-Path $base "telemetry.csv") -Append -Encoding utf8
        
        "timestamp,equity,balance,R_used,exposure,drawdown" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Encoding utf8
        "sample,risk,data" | Out-File -FilePath (Join-Path $base "risk_snapshots.csv") -Append -Encoding utf8
        
        "Trade closed: order_123 at $(Get-Date)" | Out-File -FilePath (Join-Path $base "trade_closes.log") -Encoding utf8
        
        $metadata = @{
          mode = "paper"
          run_id = "selfcheck-$ts"
          start_time = (Get-Date).ToString("o")
          end_time = $null
          log_path = $base
          pvu_used = 1.0
          broker_env = "selfcheck"
        }
        $metadata | ConvertTo-Json | Out-File (Join-Path $base "run_metadata.json") -Encoding utf8
        
        "timestamp,order_id,open_time,close_time,symbol,side,qty,open_price,close_price,pnl" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Encoding utf8
        "sample,trade,reconstruction,data" | Out-File -FilePath (Join-Path $base "closed_trades_fifo_reconstructed.csv") -Append -Encoding utf8
        
        Write-Host "? Selfcheck dir created: $base"
        Write-Host "?? Files created:"
        Get-ChildItem $base | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Stage selfcheck artifacts  
      if: ${{ always() }}
      shell: powershell
      run: |
        $ts = Get-Date -Format "yyyyMMdd_HHmmss"
        $stage = Join-Path $env:GITHUB_WORKSPACE "artifacts_$ts"
        New-Item -ItemType Directory -Force $stage | Out-Null
        
        # Copy standardized files from D:\botg\logs to workspace
        $srcs = @(
          "D:\botg\logs\**\orders.csv",
          "D:\botg\logs\**\telemetry.csv", 
          "D:\botg\logs\**\risk_snapshots.csv",
          "D:\botg\logs\**\trade_closes.log",
          "D:\botg\logs\**\run_metadata.json",
          "D:\botg\logs\**\closed_trades_fifo_reconstructed.csv"
        )
        foreach($pattern in $srcs) {
          Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | ForEach-Object {
            Copy-Item $_.FullName -Destination $stage -Force
          }
        }
        
        Write-Host "Staged selfcheck artifacts in: $stage"
        Write-Host "Files staged:"
        Get-ChildItem $stage | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }

    - name: Upload selfcheck artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: gate24h-selfcheck-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ github.workspace }}/artifacts_*/**/*
        if-no-files-found: warn
        compression-level: 6
        overwrite: true
        retention-days: 7


















