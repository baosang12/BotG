defaults:
  run:
    shell: powershell

name: Gate24h paper run

on:
  workflow_dispatch:
    inputs:
      hours:
        description: "Number of hours to run the gate"
        required: true
        default: "24"
      source:
        description: "Trigger source label"
        required: false
        default: "manual"
      mode:
        description: "Execution mode (forced to paper at runtime)"
        required: false
        default: "paper"
      force_misconfig:
        description: "Force a misconfiguration to trip the guard (for proof)"
        required: false
        default: "false"

jobs:
  preflight-ctrader:
    name: Preflight - cTrader connectivity (60s)
    runs-on: [self-hosted, windows]
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - name: Run 60s connectivity proof
        shell: powershell
        run: |
          $ErrorActionPreference='Stop'
          New-Item -ItemType Directory -Force -Path path_issues/ctrader_connect_proof | Out-Null
          $pwsh7 = Join-Path $env:ProgramFiles 'PowerShell\7\pwsh.exe'
          if (Test-Path $pwsh7) {
            & $pwsh7 -NoLogo -NoProfile -File scripts/preflight/ctrader_connect.ps1 -OutDir "path_issues/ctrader_connect_proof" -Seconds 60
          } else {
            & (Join-Path $PSHOME 'powershell.exe') -NoLogo -NoProfile -ExecutionPolicy Bypass -File scripts/preflight/ctrader_connect.ps1 -OutDir "path_issues/ctrader_connect_proof" -Seconds 60
          }

      - name: Verify proof files
        shell: powershell
        run: |
          if (!(Test-Path "path_issues/ctrader_connect_proof/connection_ok.json")) { throw "Missing connection_ok.json" }
          if (!(Test-Path "path_issues/ctrader_connect_proof/l1_sample.csv"))     { throw "Missing l1_sample.csv" }
          $j = Get-Content "path_issues/ctrader_connect_proof/connection_ok.json" | ConvertFrom-Json
          if (-not $j.ok) { throw "Connectivity check failed: $($j.reason)" }

      - name: Upload ctrader_connect_proof
        uses: actions/upload-artifact@v4
        with:
          name: ctrader_connect_proof
          path: path_issues/ctrader_connect_proof/**
          if-no-files-found: error

  gate24h:
    runs-on: [self-hosted, windows]
    needs: preflight-ctrader
    timeout-minutes: 1500
    defaults:
      run:
        shell: powershell
    env:
      BOTG_MODE: paper
      SIM_ENABLED: false
      COMMISSION_PER_LOT: 7.0
      SPREAD_PIPS: 0.1
      SLIP_RANGE_PIPS: 0.1
      SLIP_SEED: 42
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check BOM (defensive)
        shell: powershell
        run: |
          $wf = ".github/workflows/gate24h.yml"
          $bytes = [IO.File]::ReadAllBytes($wf)
          if ($bytes.Length -ge 3 -and $bytes[0] -eq 0xEF -and $bytes[1] -eq 0xBB -and $bytes[2] -eq 0xBF) {
            throw "BOM detected in $wf. Please save without BOM."
          }

      - name: Assert-PaperMode
        id: assert
        shell: powershell
        continue-on-error: true
        run: |
          $ErrorActionPreference = 'Stop'
          $mode = $env:BOTG_MODE
          $sim = $env:SIM_ENABLED
          $secondsPerHour = 3600
          $cfgPath = Join-Path $PWD 'config.runtime.json'
          if (Test-Path -LiteralPath $cfgPath) {
            try {
              $cfg = Get-Content -LiteralPath $cfgPath -Raw | ConvertFrom-Json
              if ($cfg.SecondsPerHour) { $secondsPerHour = [int]$cfg.SecondsPerHour }
              if ($cfg.simulation -and $null -ne $cfg.simulation.enabled) { $sim = [bool]$cfg.simulation.enabled }
              if ($cfg.mode) { $mode = [string]$cfg.mode }
            } catch { Write-Warning "config.runtime.json parse error: $_" }
          }
          if ('${{ inputs.force_misconfig }}' -eq 'true') {
            # Simulate misconfiguration: violate SecondsPerHour
            $secondsPerHour = 3599
          }
          $reasons = @()
          if ($mode -ne 'paper') { $reasons += "mode=$mode (expected paper)" }
          if ($sim -ne $false) { $reasons += "simulation.enabled=$sim (expected false)" }
          if ($secondsPerHour -ne 3600) { $reasons += "SecondsPerHour=$secondsPerHour (expected 3600)" }
          $runnerHost = $env:COMPUTERNAME
          $startedAt = [DateTime]::UtcNow.ToString('o')
          $src = '${{ inputs.source }}'
          $meta = [ordered]@{
            mode = $mode
            simulation = @{ enabled = [bool]$sim }
            SecondsPerHour = [int]$secondsPerHour
            started_at = $startedAt
            source = $src
            host = $runnerHost
            runner = $env:RUNNER_NAME
          }
          $runDir = "D:\\botg\\runs\\meta_" + (Get-Date -Format 'yyyyMMdd_HHmmss')
          New-Item -ItemType Directory -Force -Path $runDir | Out-Null
          ($meta | ConvertTo-Json -Depth 4) | Out-File -FilePath (Join-Path $runDir 'run_metadata.json') -Encoding utf8
          "RUN_META_DIR=$runDir" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "run_meta_dir=$runDir" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          if ($reasons.Count -gt 0) {
            Write-Host "NOT_PAPER_MODE: $($reasons -join '; ')"
            "ASSERT_FAIL=true" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            "ASSERT_REASON=$($reasons -join '; ')" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            "assert_fail=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
            "assert_reason=$($reasons -join '; ')" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          } else {
            Write-Host 'Assert-PaperMode OK'
            "assert_fail=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
            "assert_reason=" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          }

      - name: Create timestamp
        id: ts
        shell: powershell
        run: |
          $ts = Get-Date -Format "yyyyMMdd_HHmmss"
          "ts=$ts" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          $runDir = "D:\botg\runs\gate24h_$ts"
          "RUN_DIR=$runDir" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "run_dir=$runDir" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          "BOTG_LOG_PATH=$runDir" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          New-Item -ItemType Directory -Force -Path $runDir | Out-Null
          Write-Host "Created run directory: $runDir"

      - name: Restore dependencies
        shell: powershell
        run: dotnet restore BotG.sln

      - name: Build solution
        shell: powershell
        run: dotnet build BotG.sln -c Release --no-restore

      - name: Activate run config (equity=$200, fees/spread>0)
        shell: powershell
        run: |
          $ErrorActionPreference = 'Stop'
          $src = Join-Path $env:GITHUB_WORKSPACE 'config.runtime.json'
          if (!(Test-Path $src)) { throw "Missing config.runtime.json at $src" }
          Write-Host "=== USING CONFIG: $src ==="
          Get-Content $src -TotalCount 40 | ForEach-Object { Write-Host $_ }
          $targets = @('appsettings.json','appsettings.paper.json','config\trading.json','config\paper.json')
          foreach ($t in $targets) {
            $dst = Join-Path $env:GITHUB_WORKSPACE $t
            $dir = Split-Path $dst
            if ($dir -and -not (Test-Path $dir)) { New-Item -ItemType Directory -Force -Path $dir | Out-Null }
            Copy-Item -Force $src $dst
          }

      - name: Run Gate24h workload
        id: runbot
        shell: powershell
        env:
          RUN_HOURS: ${{ inputs.hours }}
        run: |
          $hours = if ($env:RUN_HOURS) { [double]$env:RUN_HOURS } else { 24 }
          if ($hours -le 0) { throw "Invalid hours: $hours" }
          $seconds = [int]([Math]::Ceiling($hours * 3600))
          $runDir = $env:RUN_DIR
          if (-not $runDir) { throw "RUN_DIR not set" }
          $args = @('run','--project','Harness/Harness.csproj','--configuration','Release','--','--seconds',"$seconds",'--artifactPath',"$runDir",'--logPath',"$runDir")
          Write-Host "Invoking: dotnet $($args -join ' ')"
          dotnet @args

      - name: Verify heartbeat output
        shell: powershell
        run: |
          $runDir = $env:RUN_DIR
          if (-not (Test-Path -LiteralPath $runDir)) { throw "Run directory missing: $runDir" }
          $orders = Join-Path $runDir 'orders.csv'
          if (-not (Test-Path -LiteralPath $orders)) { throw "orders.csv not found" }
          $file = Get-Item -LiteralPath $orders
          $ageMinutes = (Get-Date).ToUniversalTime().Subtract($file.LastWriteTimeUtc).TotalMinutes
          if ($ageMinutes -gt 5) { throw "orders.csv last write ${ageMinutes}m ago (expected â‰¤5m)" }
          $lineCount = (Get-Content -LiteralPath $orders | Measure-Object -Line).Lines
          if ($lineCount -lt 10) { throw "orders.csv too small ($lineCount lines)" }
          Write-Host "orders.csv last updated $([math]::Round($ageMinutes,2)) minutes ago with $lineCount lines"

      # === Python portable via micromamba (no registry writes) ===
      - name: Ensure TLS 1.2
        if: ${{ always() && steps.assert.outputs.assert_fail != 'true' }}
        run: |
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

      - name: Setup portable Python 3.11 (micromamba)
        if: ${{ always() && steps.assert.outputs.assert_fail != 'true' }}
        run: |
          $ErrorActionPreference='Stop'
          $root = "$env:RUNNER_TEMP\mamba"
          $env:MAMBA_ROOT_PREFIX = $root
          New-Item -ItemType Directory -Force -Path $root | Out-Null
          $mm = "$env:RUNNER_TEMP\micromamba.exe"

          # Try official CDN, then GitHub mirror
          $urls = @(
            'https://micro.mamba.pm/api/micromamba/win-64/latest',
            'https://github.com/mamba-org/micromamba-releases/releases/latest/download/micromamba-win-64'
          )
          $ok = $false
          foreach($u in $urls){
            try {
              Invoke-WebRequest -Uri $u -OutFile $mm -UseBasicParsing -TimeoutSec 120
              if((Get-Item $mm).Length -gt 1000000){ $ok=$true; break }
            } catch {
              Write-Host "Download failed from $u â€” will try next mirror."
            }
          }
          if(-not $ok){ throw "Failed to download micromamba from all mirrors." }

          $envDir = "$env:RUNNER_TEMP\pyenv311"
          & $mm create -y -p $envDir python=3.11 pandas numpy python-dateutil
          if($LASTEXITCODE -ne 0){ throw "micromamba create failed ($LASTEXITCODE)" }

          $py = Join-Path $envDir 'python.exe'
          if(-not (Test-Path $py)){ throw "python.exe not found in $envDir" }

          # Export PATH & env for subsequent steps
          ($envDir) | Out-File -Append -Encoding ascii $env:GITHUB_PATH
          (Join-Path $envDir Scripts) | Out-File -Append -Encoding ascii $env:GITHUB_PATH
          "PYTHON_EXE=$py" | Out-File -Append -Encoding ascii $env:GITHUB_ENV

          & $py -V
          & $py -c "import pandas, numpy, dateutil, sys; print('OK: core libs present', sys.version)"

      - name: Install extra Python deps (optional)
        if: ${{ always() && steps.assert.outputs.assert_fail != 'true' }}
        run: |
          $py = $env:PYTHON_EXE
          & $py -m pip --version *> $null
          if($LASTEXITCODE -eq 0 -and (Test-Path "scripts/requirements.txt")){
            & $py -m pip install -r scripts/requirements.txt
          } else {
            Write-Host "pip not found or no extra requirements â€” skipped."
          }

      - name: Preflight connectivity (retry+p95 for verify, strict for main)
        if: ${{ always() && steps.assert.outputs.assert_fail != 'true' }}
        shell: powershell
        run: |
          $src = "${{ github.event.inputs.source }}"
          $isVerify = ($src -eq "verify-l1")
          $seconds = if ($isVerify) { 90 } else { 60 }
          $maxTries = if ($isVerify) { 3 } else { 1 }
          $ok = $false
          $last = $null

          for ($i = 1; $i -le $maxTries -and -not $ok; $i++) {
            Write-Host "== Probe attempt $i/$maxTries (window ${seconds}s) =="
            $OUT = Join-Path $env:RUNNER_TEMP ("probe_" + $i)
            New-Item -ItemType Directory -Force -Path $OUT | Out-Null

            Start-Sleep -Seconds 10

            powershell -File scripts\preflight\ctrader_connect.ps1 -Seconds $seconds -OutDir $OUT -SummaryOut "$OUT\summary.json"

            if (Test-Path "$OUT\summary.json") {
              $s = Get-Content "$OUT\summary.json" -Raw | ConvertFrom-Json
              $last = $s
              if (-not $s.PSObject.Properties.Name.Contains('p95_last_age_sec') -and $s.last_age_sec_series) {
                $arr = @($s.last_age_sec_series) | ForEach-Object { [double]$_ } | Sort-Object
                if ($arr.Count -gt 0) {
                  $idx = [math]::Ceiling([double]$arr.Count * 0.95) - 1
                  if ($idx -lt 0) { $idx = 0 }
                  $p95 = $arr[$idx]
                } else {
                  $p95 = [double]::PositiveInfinity
                }
              } else {
                $p95 = [double]$s.p95_last_age_sec
              }

              Write-Host ("active_ratio={0}  tick_rate_avg={1}  p95_last_age={2}s  last_age={3}s" -f $s.active_ratio, $s.tick_rate_avg, $p95, $s.last_age_sec)
              if ($isVerify) {
                if (($p95 -le 5.0) -and ($s.active_ratio -ge 0.7) -and ($s.tick_rate_avg -ge 0.5)) { $ok = $true }
              } else {
                if (($s.last_age_sec -le 5.0) -and ($s.active_ratio -ge 0.7) -and ($s.tick_rate_avg -ge 0.5)) { $ok = $true }
              }
            } elseif (Test-Path "$OUT\connection_ok.json") {
              $c = Get-Content "$OUT\connection_ok.json" -Raw | ConvertFrom-Json
              $last = $c
              if ($isVerify) {
                if (($c.p95_last_age_sec -le 5.0) -and ($c.active_ratio -ge 0.7) -and ($c.tick_rate_avg -ge 0.5)) { $ok = $true }
              } else {
                if (($c.last_age_sec -le 5.0) -and ($c.active_ratio -ge 0.7) -and ($c.tick_rate_avg -ge 0.5)) { $ok = $true }
              }
            } else {
              Write-Host "Preflight summary not found; will retry if allowed."
            }

            if (-not $ok -and $i -lt $maxTries) { Start-Sleep -Seconds 30 }
          }

          if (-not $ok) {
            if ($last) { Write-Host ("Last summary: " + ($last | ConvertTo-Json -Depth 5)) }
            throw "Preflight connectivity failed (verify=$isVerify)."
          }

      - name: Postrun collect (L1 slippage)
        if: ${{ always() && steps.assert.outputs.assert_fail != 'true' }}
        shell: powershell
        run: |
          $artDir = Join-Path $env:RUNNER_TEMP 'postrun'
          ./scripts/postrun_collect.ps1 -RunDir "$env:RUN_DIR" -ArtifactsDir "$artDir" -WithL1

      - name: Upload postrun artifacts
        if: ${{ always() && steps.assert.outputs.assert_fail != 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: postrun_reports
          path: ${{ runner.temp }}\postrun\
          if-no-files-found: error

      - name: Gate2 postrun validation
        if: ${{ always() && steps.assert.outputs.assert_fail != 'true' }}
        shell: powershell
        run: |
          & scripts\postrun_gate2_validate.ps1 -ArtifactsDir "$env:RUN_DIR"

      - name: Upload Gate24h artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: artifacts_${{ steps.ts.outputs.ts }}
          path: ${{ steps.ts.outputs.run_dir }}/**/*
          retention-days: 30

      - name: Upload run metadata (early)
        if: ${{ steps.assert.outputs.assert_fail == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: run_metadata
          path: ${{ steps.assert.outputs.run_meta_dir }}/run_metadata.json
          retention-days: 30

      - name: Cancel run (NOT_PAPER_MODE)
        if: ${{ steps.assert.outputs.assert_fail == 'true' }}
        uses: actions/github-script@v7
        with:
          script: |
            core.info(`Cancelling workflow run due to: ${{ steps.assert.outputs.assert_reason }}`)
            await github.rest.actions.cancelWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            })

      - name: Upload run metadata
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: run_metadata
          path: ${{ steps.assert.outputs.run_meta_dir }}/run_metadata.json
          retention-days: 30

