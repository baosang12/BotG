name: Alerts synthetic test (weekly)
on:
  schedule:
    - cron: "5 2 * * 1"  # Monday 02:05 UTC
  workflow_dispatch:

jobs:
  synthetic-test:
    runs-on: ubuntu-latest
    steps:
      - name: Dispatch Gate24h preflight
        id: dispatch
        uses: actions/github-script@f28e40c7f34bde8b3046d885e986cb6290c5673b
        with:
          script: |
            const result = await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'gate24h_main.yml',
              ref: 'main',
              inputs: {
                hours: '0.1',
                mode: 'paper',
                source: 'synthetic'
              }
            });
            console.log('Dispatched Gate24h preflight for synthetic test');
            return result;

      - name: Wait and find newest run
        id: find_run
        uses: actions/github-script@f28e40c7f34bde8b3046d885e986cb6290c5673b
        with:
          script: |
            // Wait 30 seconds for dispatch to take effect
            await new Promise(resolve => setTimeout(resolve, 30000));
            
            const runs = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'gate24h_main.yml',
              event: 'workflow_dispatch',
              per_page: 1
            });
            
            if (runs.data.workflow_runs.length === 0) {
              throw new Error('No workflow_dispatch runs found');
            }
            
            const latestRun = runs.data.workflow_runs[0];
            console.log(`Found latest run: ${latestRun.id}`);
            console.log(`Status: ${latestRun.status}`);
            console.log(`URL: ${latestRun.html_url}`);
            
            core.setOutput('run_id', latestRun.id);
            core.setOutput('run_url', latestRun.html_url);
            return latestRun;

      - name: Poll for in_progress and cancel
        id: cancel
        uses: actions/github-script@f28e40c7f34bde8b3046d885e986cb6290c5673b
        with:
          script: |
            const runId = '${{ steps.find_run.outputs.run_id }}';
            console.log(`Polling run ${runId} for in_progress status...`);
            
            // Poll for up to 5 minutes for run to start
            for (let i = 0; i < 30; i++) {
              const run = await github.rest.actions.getWorkflowRun({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: runId
              });
              
              console.log(`Poll ${i+1}: Status = ${run.data.status}`);
              
              if (run.data.status === 'in_progress') {
                console.log('Run is in_progress, cancelling...');
                await github.rest.actions.cancelWorkflowRun({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  run_id: runId
                });
                console.log(`âœ… Cancelled run ${runId}`);
                console.log(`URL: ${run.data.html_url}`);
                return { cancelled: true, run_id: runId, url: run.data.html_url };
              }
              
              if (run.data.status === 'completed') {
                console.log('Run completed before we could cancel it');
                return { cancelled: false, run_id: runId, url: run.data.html_url };
              }
              
              // Wait 10 seconds before next poll
              await new Promise(resolve => setTimeout(resolve, 10000));
            }
            
            throw new Error('Timeout waiting for run to start');

      - name: Report synthetic test results
        uses: actions/github-script@f28e40c7f34bde8b3046d885e986cb6290c5673b
        with:
          script: |
            const runId = '${{ steps.find_run.outputs.run_id }}';
            const runUrl = '${{ steps.find_run.outputs.run_url }}';
            
            console.log('ðŸ§ª SYNTHETIC TEST COMPLETED');
            console.log(`RUN_ID: ${runId}`);
            console.log(`URL: ${runUrl}`);
            console.log('');
            console.log('This cancellation should trigger notify_on_failure.yml');
            console.log('Check Telegram notifications or GitHub Issues for alert confirmation');