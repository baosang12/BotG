name: Gate24h watchdog (10min)
on:
  schedule:
    - cron: "*/10 * * * *"
jobs:
  check:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    env:
      WATCHDOG_QUEUE_MIN: 10
    steps:
      - name: Check latest Gate24h status
        id: s
        uses: actions/github-script@f28e40c7f34bde8b3046d885e986cb6290c5673b
        with:
          script: |
            const wf = "gate24h_main.yml";
            const r = (await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner, repo: context.repo.repo, workflow_id: wf, per_page: 1
            })).data.workflow_runs[0];
            const q = (Date.now() - new Date(r.created_at)) / 60000;
            core.setOutput('status', r.status || '');
            core.setOutput('conclusion', r.conclusion || '');
            core.setOutput('id', r.id);
            core.setOutput('url', r.html_url);
            core.setOutput('queued', q.toFixed(0));

      - name: Telegram alert (if secrets)
        if: steps.s.outputs.conclusion != 'success' || (steps.s.outputs.status == 'queued' && fromJSON(steps.s.outputs.queued) > 10)
        uses: appleboy/telegram-action@v0.1.4
        with:
          to:    ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            ðŸ”” Gate24h watchdog
            Status: ${{ steps.s.outputs.status }}
            Conclusion: ${{ steps.s.outputs.conclusion }}
            Queued(min): ${{ steps.s.outputs.queued }}
            RunID: ${{ steps.s.outputs.id }}
            URL: ${{ steps.s.outputs.url }}

      - name: Issue alert (fallback)
        if: (steps.s.outputs.conclusion != 'success' || (steps.s.outputs.status == 'queued' && fromJSON(steps.s.outputs.queued) > 10)) && (!secrets.TELEGRAM_BOT_TOKEN || !secrets.TELEGRAM_CHAT_ID)
        uses: actions/github-script@f28e40c7f34bde8b3046d885e986cb6290c5673b
        with:
          script: |
            const tit='Gate24h alerts (auto)';
            const msg=`ðŸ”” Gate24h watchdog
            Status: ${{ steps.s.outputs.status }}
            Conclusion: ${{ steps.s.outputs.conclusion }}
            Queued(min): ${{ steps.s.outputs.queued }}
            RunID: ${{ steps.s.outputs.id }}
            URL: ${{ steps.s.outputs.url }}`;
            const {data: issues}=await github.rest.issues.listForRepo({owner:context.repo.owner,repo:context.repo.repo,state:'open',per_page:100});
            let issue=issues.find(i=>i.title===tit);
            if(!issue){ issue=(await github.rest.issues.create({owner:context.repo.owner,repo:context.repo.repo,title:tit,labels:['gate-alert']})).data; }
            await github.rest.issues.createComment({owner:context.repo.owner,repo:context.repo.repo,issue_number:issue.number,body:msg});

