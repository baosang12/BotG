name: smoke-selftest

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_ok:
        description: "Force STATUS=OK to exercise auto-close path (manual only)"
        type: boolean
        default: false
  schedule:
    - cron: '0 1 * * *' # 01:00 UTC / 08:00 ICT

permissions:
  contents: read
  pull-requests: write
  issues: write

concurrency:
  group: smoke-selftest-${{ github.ref }}
  cancel-in-progress: true

jobs:
  selftest:
    runs-on: windows-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: |
            ~\AppData\Local\pip\Cache
          key: pip-${{ runner.os }}-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas

      - name: Verify stdlib sqlite3
        shell: pwsh
        run: python -c "import sqlite3; print('sqlite3 OK:', sqlite3.sqlite_version)"

      - name: PowerShell ops.ps1 self-test
        shell: pwsh
        working-directory: ${{ github.workspace }}
        env:
          CI_BLOCK_FAIL: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/main') && '1' || '0' }}
        run: |
          Write-Host "=== Loading ops.ps1 ==="
          . .\scripts\ops.ps1
          Write-Host "=== Running self-test ==="
          .\scripts\ops_selftest.ps1

      - name: Summarize health-check
        id: sum
        if: always()
        shell: pwsh
        run: |
          # Override for manual dispatch test
          $event = "${{ github.event_name }}"
          $forceOk = "${{ inputs.force_ok || false }}"
          $guardAllowed = "${{ steps.guard.outputs.allowed }}"
          $guardReason = "${{ steps.guard.outputs.reason }}"
          if ($event -eq 'workflow_dispatch' -and $forceOk -eq 'true' -and $guardAllowed -ne 'true') {
            $denied = @"
          ### Smoke selftest summary (FORCED REQUEST DENIED)
          - **STATUS**: UNKNOWN
          - **Reason**: $guardReason
          "@
            $denied | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding utf8
            "status=UNKNOWN" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
            "issues_count=0" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
            return
          }
          if ($event -eq 'workflow_dispatch' -and $forceOk -eq 'true') {
            $forced = @"
          ### Smoke selftest summary (FORCED)
          - **STATUS**: OK
          - **Reason**: Manual dispatch with force_ok=true (incident auto-close exercise)
          "@
            $forced | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding utf8
            "status=OK" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
            "issues_count=0" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
            return
          }

          $folder = Join-Path $PWD 'artifacts_ascii'
          $latest = Get-ChildItem $folder -Filter 'health_check_*.json' -ErrorAction SilentlyContinue |
            Sort-Object LastWriteTime -Descending | Select-Object -First 1
          if (-not $latest) {
            "`n### Smoke selftest summary`n_No health JSON found_`n" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding utf8
            "status=UNKNOWN"      | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
            "issues_count=0"      | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
            exit 0
          }
          $j = Get-Content $latest.FullName -Raw | ConvertFrom-Json
          $issues = if ($j.issues) { $j.issues } else { @() }
          $issuesList = if ($issues.Count -gt 0) { ($issues | ForEach-Object { "- $_" }) -join "`n" } else { "_None_" }
          $summary = @"
          ### Smoke selftest summary
          - **STATUS**: $($j.STATUS)
          - **Can continue**: $($j.can_continue_running)
          - **Issues**:
          $issuesList
          - **Artifact**: $($latest.Name)
          "@
          $summary | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding utf8
          "status=$($j.STATUS)"        | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
          "issues_count=$($issues.Count)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8

      - name: Comment summary on PR
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const marker = '<!-- selftest-summary -->';
            const body = `${marker}
            ###  Smoke selftest
            - **STATUS**: ${{ steps.sum.outputs.status }}
            - **Issues**: ${{ steps.sum.outputs.issues_count }}
            - **Run**: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}
            _Auto-updated by CI._`;
            const {owner, repo} = context.repo;
            const pr = context.payload.pull_request.number;
            const comments = await github.rest.issues.listComments({owner, repo, issue_number: pr});
            const existing = comments.data.find(c => c.body && c.body.includes(marker));
            if (existing) {
              await github.rest.issues.updateComment({owner, repo, comment_id: existing.id, body});
            } else {
              await github.rest.issues.createComment({owner, repo, issue_number: pr, body});
            }

      - name: Open/update incident issue when unhealthy
        if: ${{ github.event_name != 'pull_request' && steps.sum.outputs.status != 'OK' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const {owner, repo} = context.repo;
            const runUrl = `${context.serverUrl}/${owner}/${repo}/actions/runs/${context.runId}`;
            const status = `${{ steps.sum.outputs.status }}`;
            const issuesCount = `${{ steps.sum.outputs.issues_count }}`;
            const title = `Selftest incident: ${status}`;
            const labels = ['ci-selftest', 'incident'];

            // ensure labels exist
            for (const name of labels) {
              try { await github.rest.issues.getLabel({owner, repo, name}); }
              catch {
                try { await github.rest.issues.createLabel({owner, repo, name, color: name==='incident' ? 'B60205' : '0E8A16'}); } catch {}
              }
            }

            // find existing open incident
            const q = `repo:${owner}/${repo} is:issue is:open label:ci-selftest label:incident in:title "Selftest incident"`;
            const res = await github.rest.search.issuesAndPullRequests({ q });

            const body = [
              '###  Smoke selftest incident',
              `- **STATUS**: ${status}`,
              `- **Issues**: ${issuesCount}`,
              `- **Run**: ${runUrl}`,
              '',
              '_Maintained automatically by CI._'
            ].join('\n');

            if (res.data.items.length) {
              const num = res.data.items[0].number;
              await github.rest.issues.update({owner, repo, issue_number: num, title});
              await github.rest.issues.createComment({owner, repo, issue_number: num, body});
            } else {
              await github.rest.issues.create({owner, repo, title, body, labels});
            }

      - name: Close incident issue when healthy
        if: ${{ github.event_name != 'pull_request' && steps.sum.outputs.status == 'OK' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const {owner, repo} = context.repo;
            const runUrl = `${context.serverUrl}/${owner}/${repo}/actions/runs/${context.runId}`;
            const q = `repo:${owner}/${repo} is:issue is:open label:ci-selftest label:incident`;
            const res = await github.rest.search.issuesAndPullRequests({ q });
            for (const it of res.data.items) {
              await github.rest.issues.createComment({owner, repo, issue_number: it.number, body: ` Resolved by healthy run: ${runUrl}`});
              await github.rest.issues.update({owner, repo, issue_number: it.number, state:'closed'});
            }

      - name: Upload self-test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: selftest-results
          retention-days: 7
          path: |
            artifacts_ascii/**
            scripts/ops_selftest.ps1
            .vscode/tasks.json
            docs/RUNBOOK_smoke60m.md
