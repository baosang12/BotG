name: smoke-selftest

concurrency:
  group: smoke-selftest-${{ github.ref }}
  cancel-in-progress: true

on: 
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    - cron: '0 1 * * *'   # 08:00 ICT daily (adjust if needed)

jobs:
  selftest:
    runs-on: windows-latest
    timeout-minutes: 12
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          cache: 'pip'
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas
        
      - name: Verify stdlib sqlite3
        shell: pwsh
        run: python -c "import sqlite3, sys; print('sqlite3 OK, version:', sqlite3.sqlite_version)"
        
      - name: PowerShell ops.ps1 self-test
        shell: pwsh
        working-directory: ${{ github.workspace }}
        env:
          CI_BLOCK_FAIL: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/main') && '1' || '0' }}
        run: |
          Write-Host "=== Loading ops.ps1 ==="
          . .\scripts\ops.ps1
          
          Write-Host "=== Running self-test ==="
          .\scripts\ops_selftest.ps1
          
      - name: Summarize health-check
        id: sum
        if: always()
        shell: pwsh
        run: |
          $folder = Join-Path $PWD 'artifacts_ascii'
          $latest = Get-ChildItem $folder -Filter 'health_check_*.json' -ErrorAction SilentlyContinue |
            Sort-Object LastWriteTime -Descending | Select-Object -First 1
          if (-not $latest) {
            "### Smoke selftest summary`n_No health JSON found_" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding utf8
            "status=UNKNOWN" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
            "issues_count=0" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
            exit 0
          }
          $j = Get-Content $latest.FullName -Raw | ConvertFrom-Json
          $issues = @($j.issues) | Where-Object { $_ } 
          $issuesMd = if ($issues.Count -gt 0) { ($issues | ForEach-Object { "- $_" }) -join "`n" } else { "_None_" }
          @"
        ### Smoke selftest summary
        - **STATUS**: $($j.STATUS)
        - **Can continue**: $($j.can_continue_running)
        - **Reconstruct tool**: $($j.reconstruct_tool.present) ($($j.reconstruct_tool.path))
        - **Issues**:
        $issuesMd
        "@ | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding utf8
          "status=$($j.STATUS)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
          "issues_count=$($issues.Count)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8


          - name: Open/update incident issue when unhealthy

            if: ${{ github.event_name != 'pull_request' && steps.sum.outputs.status != 'OK' }}

            uses: actions/github-script@v7

            with:

              github-token: ${{ secrets.GITHUB_TOKEN }}

              script: |

                const {owner, repo} = context.repo;

                const runUrl = `${context.serverUrl}/${owner}/${repo}/actions/runs/${context.runId}`;

                const status = `${{ steps.sum.outputs.status }}`;

                const issuesCount = `${{ steps.sum.outputs.issues_count }}`;

                const title = `Selftest incident: ${status}`;

                const labels = ['ci-selftest','incident'];


                // ensure labels exist

                for (const name of labels) {

                  try { await github.rest.issues.getLabel({owner, repo, name}); }

                  catch { try {

                    await github.rest.issues.createLabel({

                      owner, repo, name,

                      color: name==='incident' ? 'B60205' : '0E8A16'

                    });

                  } catch {} }

                }


                // find existing open incident

                const q = `repo:${owner}/${repo} is:issue is:open label:ci-selftest label:incident in:title "Selftest incident"`;

                const res = await github.rest.search.issuesAndPullRequests({ q });


                const body = [

                  '###  Smoke selftest incident',

                  `- **STATUS**: ${status}`,

                  `- **Issues**: ${issuesCount}`,

                  `- **Run**: ${runUrl}`,

                  '',

                  '_Maintained automatically by CI._'

                ].join('\n');


                if (res.data.items.length) {

                  const num = res.data.items[0].number;

                  await github.rest.issues.update({owner, repo, issue_number: num, title});

                  await github.rest.issues.createComment({owner, repo, issue_number: num, body});

                } else {

                  await github.rest.issues.create({owner, repo, title, body, labels});

                }


          - name: Close incident issue when healthy

            if: ${{ github.event_name != 'pull_request' && steps.sum.outputs.status == 'OK' }}

            uses: actions/github-script@v7

            with:

              github-token: ${{ secrets.GITHUB_TOKEN }}

              script: |

                const {owner, repo} = context.repo;

                const runUrl = `${context.serverUrl}/${owner}/${repo}/actions/runs/${context.runId}`;

                const q = `repo:${owner}/${repo} is:issue is:open label:ci-selftest label:incident`;

                const res = await github.rest.search.issuesAndPullRequests({ q });

                for (const it of res.data.items) {

                  await github.rest.issues.createComment({

                    owner, repo, issue_number: it.number,

                    body: ` Resolved by healthy run: ${runUrl}`

                  });

                  await github.rest.issues.update({owner, repo, issue_number: it.number, state:'closed'});

                }

      - name: Comment summary on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const body = [
              '### Smoke selftest (auto-summary)',
              `**STATUS**: ${{ steps.sum.outputs.status }}`,
              `**Issues**: ${{ steps.sum.outputs.issues_count }}`,
              '',
              '> Full details are in the job summary and artifacts.'
            ].join('\n');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            });

      - name: Upload self-test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: selftest-results
          retention-days: 7
          path: |
            scripts/ops_selftest.ps1
            .vscode/tasks.json
            docs/RUNBOOK_smoke60m.md

