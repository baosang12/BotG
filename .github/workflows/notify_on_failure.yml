name: Notify on Gate24h failure
on:
  workflow_run:
    workflows: ["Gate 24h (paper supervised)"]
    types: [completed]
  workflow_dispatch:
    inputs:
      run_id:
        description: "Gate24h run id"
        required: true
      conclusion:
        description: "Gate24h conclusion"
        required: true
      url:
        description: "Gate24h url"
        required: true

permissions:
  contents: read
  issues: write

jobs:
  notify:
    timeout-minutes: 10
    if: ${{ (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion != 'success') || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    env:
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
    steps:
      - name: Resolve on-call assignees (optional)
        id: oncall
        shell: bash
        run: |
          set -euo pipefail
          echo "assignees=${{ secrets.ALERT_ASSIGNEES }}" >> "$GITHUB_OUTPUT"

      - name: Resolve vars (run info)
        id: vars
        shell: bash
        env:
          RUN_ID_WR: ${{ github.event.workflow_run.id }}
          RUN_CONC_WR: ${{ github.event.workflow_run.conclusion }}
          RUN_URL_WR: ${{ github.event.workflow_run.html_url }}
          RUN_ID_DISP: ${{ github.event.inputs.run_id }}
          RUN_CONC_DISP: ${{ github.event.inputs.conclusion }}
          RUN_URL_DISP: ${{ github.event.inputs.url }}
        run: |
          set -euo pipefail
          RUN_ID="${RUN_ID_WR:-$RUN_ID_DISP}"
          RUN_CONC="${RUN_CONC_WR:-$RUN_CONC_DISP}"
          RUN_URL="${RUN_URL_WR:-$RUN_URL_DISP}"
          echo "run_id=$RUN_ID" >> "$GITHUB_OUTPUT"
          echo "run_conc=$RUN_CONC" >> "$GITHUB_OUTPUT"
          echo "run_url=$RUN_URL" >> "$GITHUB_OUTPUT"
          echo "Resolved: id=$RUN_ID conc=$RUN_CONC url=$RUN_URL"
      - name: Telegram notify (if secrets)
        id: tgram
        if: ${{ env.TELEGRAM_BOT_TOKEN != '' && env.TELEGRAM_CHAT_ID != '' }}
        shell: bash
        continue-on-error: true
        env:
          ALERT_ASSIGNEES: ${{ steps.oncall.outputs.assignees }}
        run: |
          set -euo pipefail
          MSG="❌ Gate24h failed\nRepo: ${{ github.repository }}\nRunID: ${{ steps.vars.outputs.run_id }}\nConclusion: ${{ steps.vars.outputs.run_conc }}\nURL: ${{ steps.vars.outputs.run_url }}"
          if [ -n "${ALERT_ASSIGNEES:-}" ]; then
            MSG="ONCALL: ${ALERT_ASSIGNEES}\n${MSG}"
          fi
          RESP_FILE="/tmp/tg_resp.json"
          HTTP=$(curl -sS -o "$RESP_FILE" -w "%{http_code}" -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
                 -d "chat_id=${TELEGRAM_CHAT_ID}" --data-urlencode "text=$(printf '%b' "$MSG")" -d "parse_mode=HTML" || echo "000")
          echo "http_code=$HTTP" >> "$GITHUB_OUTPUT"
          if [ "$HTTP" = "200" ] && grep -q '"ok":true' "$RESP_FILE"; then
            echo "status=ok" >> "$GITHUB_OUTPUT"
            echo "TELEGRAM_HTTP=200"
          else
            echo "status=fail" >> "$GITHUB_OUTPUT"
            echo "TELEGRAM_HTTP=$HTTP"
            echo "Telegram response:" && sed -e '1,5!d' "$RESP_FILE" || true
          fi

      - name: Dedupe: check existing alert issue
        id: dedupe
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TITLE: "Gate24h alert: run #${{ steps.vars.outputs.run_id }} → ${{ steps.vars.outputs.run_conc }}"
        run: |
          set -euo pipefail
          cnt=$(gh issue list --search "in:title \"$TITLE\" state:open" --json number --limit 1 | jq 'length')
          echo "exists=$cnt" >> "$GITHUB_OUTPUT"

      - name: Issue alert (fallback)
        if: ${{ steps.tgram.outputs.status != 'ok' && steps.dedupe.outputs.exists == '0' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ALERT_ASSIGNEES: ${{ steps.oncall.outputs.assignees }}
        shell: bash
        continue-on-error: true
        run: |
          set -euo pipefail
          TITLE="Gate24h alert: run #${{ steps.vars.outputs.run_id }} → ${{ steps.vars.outputs.run_conc }}"
          BODY="${{ steps.vars.outputs.run_url }}"
          LABEL="gate-alert"
          # optional assignees (comma-separated usernames)
          HAS_ASSIGNEES=0
          if [ -n "${ALERT_ASSIGNEES:-}" ]; then
            HAS_ASSIGNEES=1
            echo "Assigning on-call: $ALERT_ASSIGNEES"
          fi
          if gh label list --limit 100 | grep -q "^${LABEL}\\b"; then
            echo "Label '${LABEL}' found. Creating labeled issue..."
            if [ $HAS_ASSIGNEES -eq 1 ]; then
              gh issue create -R "$GITHUB_REPOSITORY" -t "$TITLE" -b "$BODY" -l "$LABEL" --assignee "$ALERT_ASSIGNEES" || echo "Issue creation failed (labeled, assigned)."
            else
              gh issue create -R "$GITHUB_REPOSITORY" -t "$TITLE" -b "$BODY" -l "$LABEL" || echo "Issue creation failed (labeled)."
            fi
          else
            echo "Label '${LABEL}' not found. Creating issue without label..."
            if [ $HAS_ASSIGNEES -eq 1 ]; then
              gh issue create -R "$GITHUB_REPOSITORY" -t "$TITLE" -b "$BODY" --assignee "$ALERT_ASSIGNEES" || echo "Issue creation failed (unlabeled, assigned)."
            else
              gh issue create -R "$GITHUB_REPOSITORY" -t "$TITLE" -b "$BODY" || echo "Issue creation failed (unlabeled)."
            fi
          fi

      - name: Verbose summary (≥100 lines)
        shell: bash
        run: |
          echo "---- NOTIFY SUMMARY BEGIN ----"
          echo "repo=$GITHUB_REPOSITORY"
          echo "run_id=${{ steps.vars.outputs.run_id }}"
          echo "conclusion=${{ steps.vars.outputs.run_conc }}"
          echo "url=${{ steps.vars.outputs.run_url }}"
          # Derive telegram status/http with safe fallbacks (empty when step didn't run)
          TSTAT="${{ steps.tgram.outputs.status }}"; [ -z "$TSTAT" ] && TSTAT="skipped"; echo "telegram_status=$TSTAT"
          THTTP="${{ steps.tgram.outputs.http_code }}"; [ -z "$THTTP" ] && THTTP="NA"; echo "telegram_http=$THTTP"
          for i in $(seq 1 90); do
            echo "keepalive-$i ts=$(date -u +%FT%TZ) run=${{ steps.vars.outputs.run_id }}"
          done
          echo "---- NOTIFY SUMMARY END ----"

      - name: Upload notify_e2e_proof.json (if exists)
        if: always()
        uses: actions/upload-artifact@v4
        if: ${{ hashFiles('path_issues/notify_e2e_proof.json') != '' }}
        with:
          name: notify_e2e_proof
          path: path_issues/notify_e2e_proof.json

