name: smoke-fast-on-pr
on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main, develop, feat/** ]

concurrency:
  group: pr-${{ github.event.pull_request.number }}
  cancel-in-progress: false

jobs:
  shadow:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    outputs:
      status:   ${{ steps.decide.outputs.status }}
      reason:   ${{ steps.decide.outputs.reason }}
      retry_ok: ${{ steps.decide.outputs.retry_ok }}
    steps:
      - uses: actions/checkout@v4

      - name: Start event
        run: |
          mkdir -p .botg
          echo '{"ts":"'"$(date -u +%FT%TZ)"'","run_id":'${{ github.run_id }}',"pr":'${{ github.event.pull_request.number }}',"stage":"shadow","level":"info","msg":"start","kv":{"sha":"${{ github.sha }}","actor":"${{ github.actor }}"}}' >> .botg/events.jsonl


      - name: Run shadow tests (fast)
        id: tests
        shell: bash
        run: |
          set -e

          if [ $((RANDOM % 10)) -eq 0 ]; then
            echo "simulated network 502" >&2
            echo "exit_code=502" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "exit_code=0" >> $GITHUB_OUTPUT


        if: always()
        id: classify
        shell: bash
        run: |
          set -e

          cat .botg/status.json

      - name: Decide & log
        if: always()
        id: decide
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -e
          STATUS=$(jq -r .status < .botg/status.json)
          REASON=$(jq -r .reason < .botg/status.json)

          echo "status=$STATUS" >> $GITHUB_OUTPUT
          echo "reason=$REASON" >> $GITHUB_OUTPUT
          echo "retry_ok=$RETRY_OK" >> $GITHUB_OUTPUT
          echo '{"ts":"'"$(date -u +%FT%TZ)"'","run_id":'${{ github.run_id }}',"pr":'${{ github.event.pull_request.number }}',"stage":"decide","level":"info","msg":"conclusion","kv":{"status":"'"$STATUS"'","reason":"'"$REASON"'"}}' >> .botg/events.jsonl

      - name: Upload events
        if: always()
        uses: actions/upload-artifact@v4
        with:


  auto-rerun:
    needs: shadow
    if: needs.shadow.outputs.status == 'AUTO_RERUN' && needs.shadow.outputs.retry_ok == 'true'
    runs-on: ubuntu-latest
    steps:

